{"ast":null,"code":"import { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes.js';\nexport default (function () {\n  let posts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case DELETE:\n      return posts.filter(post => post._id !== action.payload);\n\n    case UPDATE:\n      return posts.map(post => post._id === action.payload._id ? action.payload : post);\n\n    case LIKE:\n      return posts.map(post => post._id === action.payload._id ? action.payload : post);\n\n    case FETCH_ALL:\n      return action.payload;\n\n    case CREATE:\n      return [...posts, action.payload];\n\n    default:\n      return posts;\n  }\n});","map":{"version":3,"sources":["D:/mainProject/memories_project/Memories/client/src/reducers/posts.js"],"names":["FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","posts","action","type","filter","post","_id","payload","map"],"mappings":"AAAA,SAASA,SAAT,EAAmBC,MAAnB,EAA2BC,MAA3B,EAAoCC,MAApC,EAA4CC,IAA5C,QAAuD,6BAAvD;AAEA,gBAAgB,YAAuB;AAAA,MAAtBC,KAAsB,uEAAd,EAAc;AAAA,MAAXC,MAAW;;AACnC,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAKJ,MAAL;AACI,aAAOE,KAAK,CAACG,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaJ,MAAM,CAACK,OAA3C,CAAP;;AACJ,SAAKT,MAAL;AACI,aAAOG,KAAK,CAACO,GAAN,CAAWH,IAAD,IAAWA,IAAI,CAACC,GAAL,KAAaJ,MAAM,CAACK,OAAP,CAAeD,GAA5B,GAAkCJ,MAAM,CAACK,OAAzC,GAAmDF,IAAxE,CAAP;;AACJ,SAAKL,IAAL;AACI,aAAOC,KAAK,CAACO,GAAN,CAAWH,IAAD,IAAWA,IAAI,CAACC,GAAL,KAAaJ,MAAM,CAACK,OAAP,CAAeD,GAA5B,GAAkCJ,MAAM,CAACK,OAAzC,GAAmDF,IAAxE,CAAP;;AACJ,SAAKT,SAAL;AACI,aAAOM,MAAM,CAACK,OAAd;;AAEJ,SAAKV,MAAL;AACI,aAAO,CAAC,GAAGI,KAAJ,EAAYC,MAAM,CAACK,OAAnB,CAAP;;AAEJ;AACI,aAAON,KAAP;AAfR;AAkBH,CAnBD","sourcesContent":["import { FETCH_ALL,CREATE, UPDATE , DELETE ,LIKE} from '../constants/actionTypes.js';\r\n\r\nexport default  (posts = [],action) => {\r\n    switch(action.type)\r\n    {        \r\n        case DELETE:\r\n            return posts.filter((post) => post._id !== action.payload); \r\n        case UPDATE:\r\n            return posts.map((post) => (post._id === action.payload._id ? action.payload : post));\r\n        case LIKE:\r\n            return posts.map((post) => (post._id === action.payload._id ? action.payload : post));\r\n        case FETCH_ALL:\r\n            return action.payload;\r\n        \r\n        case CREATE:\r\n            return [...posts , action.payload];\r\n        \r\n        default:\r\n            return posts;\r\n            \r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}